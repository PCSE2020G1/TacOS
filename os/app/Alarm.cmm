//alarm.cmm

/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2020 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * mp3Proc.cmm : MP3 デコーダのドライバ
 *
 * 2020.08.30 : 新規作成
 *
 * $Id$
 *
 */

#include "mp3Proc.hmm"
#include "mp3Files.hmm"
#include "../util/crt0.hmm"
#include "../kernel/kernel.hmm"
#include "../fs/fs.hmm"
#include "spi.hmm"
#include "lcd.hmm"
#include "shellProc.hmm"
#include <mm.hmm>
#include <util.hmm>

// レスポンス
#define OK  0
#define ERR 1
#define N 25
#define M 30

int alarmtime;                              //カウントダウンする時間を持つ
char[] filename1 = array(N);
char[] filename2 = array(N);
char[] filename3 = array(N);
char[] mu_path = array(M);
char[] music_path = array(M);
int minute = 0;
int second = 0;
boolean set = false;              //0=minute,1=second
boolean music = false;            //0=無音,1=有音
boolean alarmflag = false;
//アラーム機能がオンになっているか．戻り値0でアラーム実行,戻り値1で何かしらの理由でアラームが解除されたこと示す


public void timelcd(){
  cls_block(3,3,5,1);
  locateXY(3,3);
  putDec(minute,2);
  locateXY(5,3);
  putCh(':');
  locateXY(6,3);
  putDec(second,2);
}

//1秒タイマー
public void timer1s(){
  minute=1;
  second=5;
  timelcd();
  int timer = minute * 60 + second;
  for(int i=0; i<timer; i=i+1){  //指定秒数回
    for(int k=0; k<10; k=k+1){   //1s=0.1s*10回
      out(0x00,0x64); //0番地に100ms(=0.1s)
    }
    if(minute!=0 && second==0){
      minute=minute-1;
      second=59;
      timelcd();
    }
    else if(minute==0 && second==0){
      break;
    }
    else{
      second = second - 1;
      timelcd();
    }
  }
}

public void configtime(){    //時間入力画面をlcdへ
  cls();
  putLineH(0,0,6);
  putLineH(0,15,6);
  putLineW(0,1,14);
  putLineW(5,1,14);
  locateXY(1,1);
  putStr("config time");
  locateXY(3,3);
  putDec(minute,2);
  locateXY(5,3);
  putCh(':');
  locateXY(6,3);
  putDec(second,2);
  locateXY(9,3);
  putStr("SET");

  for(;;){
    int sw = readSw();
    int num = swToNum(sw);   //押されたボタン
    if(set==false && num==1 ){    //上なら
      minute=minute+1;
      timelcd();
    }
    else if(set==false && num==5 ){  //下なら
      minute=minute-1;
      timelcd();
    }
    else if(set==true && num==1 ){   //上なら
      second=second+1;
      timelcd();
    }
    else if(set==true && num==5 ){   //下なら
      second=second-1;
      timelcd();
    }
    else if(set==false && num==3 ){   //min右
      set=true;
    }
    else if(set==true && num==2 ){   //sec左
      set=false;
    }
    else if(set==true && num==3 ){   //sec右
      break;                  //時間確定
    }
  }
}

// ここからプロセスの実行が始まる
public boolean alarm(){
  alarmflag = true;
  cls();//画面枠の作成↓
  putLineW(1,0,9);
  putDoubleLineW(0,5,10); //二重線
  putLineW(11,0,4);
  putLineW(11,7,4);
  putLineH(0,0,5);
  putLineH(0,6,2);
  putDoubleLineH(10,0,8);
  //putLineH(11,0,8);
  locateXY(2,4);
  putCh('V');         //下向きの矢印
  locateXY(1,6);
  putStr("-select");
  locateXY(4,7);
  putStr("track-");

//曲名リストをlcdへ
  int i=0;
  filename1 = malloc(sizeof(char)*N);
  filename2 = malloc(sizeof(char)*N);
  filename3 = malloc(sizeof(char)*N);
  mu_path = malloc(sizeof(char)*M);
  music_path = malloc(sizeof(char)*M);
  ////////////
  locateXY(1,2);
  putStr("HelloWorld");
  printF("HelloWorld");
  ////////////
  FilesSort(0);       //mode0
  for(;;){    //alarmflag=trueの時永遠に回る
    int sw = readSw();
    int num = swToNum(sw);   //押されたボタン
    locateXY(1,3);
    putStr("HelloHello");

    if(i!=numFile && num==5 ){               //下ボタン
      i=i+1;
    }
    else if(i!=0 && num==1){           //上ボタン
      i=i-1;
    }
    else if(num==3){              //曲を選択したら
      configtime();
      break;
    }
    else{
    i=i+0;
    }

    strCpy(filename1,index_list[i].music_name);
    if(filename1!=null){         //曲名が存在するか
      cls_block(1,2,8,1);
      locateXY(1,2);
      if(strLen(filename1)<=16){  //文字数*2で返ってくる
        putStr(filename1);
        locateXY(1,1);
        putCh('>');
      }
      else{
        filename1[7]='*';   //8文字目を「・・・」,9文字目を「¥0」
        filename1[8]='\0';
        putStr(filename1);
      }
    }
    strCpy(filename2,index_list[i+1].music_name);
    if(filename2!=null){
    cls_block(2,2,8,1);
      locateXY(2,2);
      if(strLen(filename2)<=16){  //文字数*2で返ってくる
        putStr(filename2);
        locateXY(1,1);
        putCh('A');
      }
      else{
        filename2[7]='*';   //8文字目を「・・・」,9文字目を「¥0」
        filename2[8]='\0';
        putStr(filename2);
      }
    }
    strCpy(filename3,index_list[i+2].music_name);
    if(filename3!=null){
    cls_block(2,3,8,1);
      locateXY(2,3);
      if(strLen(filename3)<=16){  //文字数*2で返ってくる
        putStr(filename3);
      }
      else{
        filename3[7]='*';   //8文字目を「・・・」,9文字目を「\0」
        filename3[8]='\0';
        putStr(filename3);
      }
    }
  free(filename1);
  free(filename2);
  free(filename3);
  }

  for(;;){
    int sw = readSw();
    int num = swToNum(sw);   //押されたボタン
    if(music==true && num==5){
      stop();
      music=false;
      alarmflag = false;
      break;
    } else {
      music=true;
      mu_path = subCat("./MP3/",filename1);
      music_path = subCat(mu_path,".mp3");
      play(music_path);
    }
  }
  free(music_path);
  free(mu_path);
  return alarmflag;
}

//alarmが呼ばれて
//1秒タイマー関数へ
//ユーザ指定の値をTimerレジスタに
//指定秒経過したら音源再生
//STOPで停止
//横１６．縦８
