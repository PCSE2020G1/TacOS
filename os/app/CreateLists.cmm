/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2020 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * mp3Files.cmm : MP3ファイルの一覧
 *
 * 2020.11.20 : 新規作成
 * 2020.11.30 : ListCreateInit(), IndexCreate()追加
 *
 * $Id$
 *
 */

#include <fs.hmm>
#include <util.hmm>
#include <mm.fmm>
#include "appUtil.hmm"
#include "mp3Files.hmm"
#include "lcd.hmm"

#define FILE_SIZE 64 //オリジナルリストに含まれる曲の最大数

public int[][] list = array(10, 30); //サイズは適当
//list = {{1, 4, 5, 10}, {2, 3, 6}, {1, 2, 7, 8}};みたいなイメージ

char[] list_file = array(FILE_SIZE); //リスト名を格納する一次変数
char[] buf = array(32);
int fd; 


public void ListCreateInit(){                                          // ファイルディスクリプタ
    if ((fd=open("./", READ_MODE))<0) {
        panic("panic1:can't open MP3 Dir debug");
    }
    Dir_i dir; //appUtil.hmmで宣言されている
    //Dir構造体のnameメンバーは，大きさ12の文字配列で初期化されている必要があります(cmm.pdf 4.1.17 readDir)
    int i = 0;
    while (i<5 && (dir=readDir_i(fd, "csv"))!=null) {   // 最大5つファイル名を読む -> 後で変更
        strCpy(list_file, dir.name); //ファイル名をfilesにコピー
        if((fd=open(list_file, READ_MODE))>=0 && strCmp(list_file, "index.csv") != 0){ //リストファイルが存在したら
            //各行を処理する
            int t, p = 0;
            read(fp, buf, 1);
            for(t=0; ord(buf[0])!=10; t=t+1){
                if(buf[0] == ','){
                    str_line[t] = '\0';
                    list[i][p] = func_atoi(str_line, t);
                    t = -1;
                    p = p + 1;
                } else{
                    str_line[t] = buf[0];
                }
                read(fp, buf, 1);
            }
            str_line[t] = '\0';
            list[i][p] = func_atoi(str_line, t);
            printF("list = %d\n", list_file[i]);
        }   
        i = i + 1;
        close(fd);
    }
    printF("end\n");
}


public char[][] IndexCreate(){
    if((fd=open("index.csv", WRITE_MODE))>=0){ //ファイルが開けたら
        write(fd, ",id,play_cnt,art_name,song_len", 31); //最初の一行
        //曲名
        strCpy(buf, index_list[i].music_name);
        write(fd, buf, 15); //バイト数はまだ適当
        //
        write(fd, ',', 1);
        //id
        strCpy(buf, _ItoA(index_list[i].id));
        write(fd, buf, 5);
        //
        write(fd, ',', 1);
        //play_cnt
        strCpy(buf, _ItoA(index_list[i].play_cnt));
        write(fd, buf, 5);
        //
        write(fd, ',', 1);
        //art_name
        strCpy(buf, index_list[i].art_name);
        write(fd, buf, 10);
        //
        write(fd, ',', 1);
        //song_len
        strCpy(buf, _ItoA(index_list[i].song_len));
        write(fd, buf, 3);
    }
    return null;
}


public void FileManage(){
    
}


public char[] ListCreate(index_type[] index_file, int n){
    
    return null;
}

public void ListManage(char[] list_file){

}
