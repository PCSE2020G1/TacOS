/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2020 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * mp3Files.cmm : MP3ファイルの一覧
 *
 * 2020.09.16 : 新規作成
 *
 * $Id$
 *
 */
#include <fs.hmm>
#include <util.hmm>
#include <mm.hmm>
#include "appUtil.hmm"
#include "mp3Files.hmm"


#define MUSIC_NAME_SIZE 20 //曲名のサイズ
#define ART_NAME_SIZE 20 //アーティスト名のサイズ
#define ALBAM_NAME_SIZE 20 //アーティスト名のサイズ
#define func_cal(a, s) ((a % s)*10)


char[] buf = array(32);

boolean debugflag = false; //スキップ用のフラグ true:skip false:execute


int[] bin_p = {1, 2, 4, 8};
int[][] bit_rate_table_1 = {{1, 1, 1}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
                            {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
                            {0, 0, 0}, {288, 160, 128}, {320, 192, 160}, {0, 0, 0},
                            {0, 0, 0}, {0, 0, 0}, {448, 384, 320}, {0, 0, 0}};
int[][] bit_rate_table_2 = {{1, 1, 1}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
                            {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
                            {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
                            {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}};
int[][] sample_rate = {{441, 220, 110}, {480, 240, 120}, {320, 160, 80}, {0, 0, 0}}; //int型は16bit(signed)なので、下二桁を落とす

public int numFile;                                        // ファイルの個数

void TagsInit();

// /MP3 ディレクトリからファイルの一覧を作る（初期化）
public void mp3FilesInit() {
  int fd;                                           // ファイルディスクリプタ
  if ((fd=open("/MP3", READ_MODE))<0) {
    panic("panic1:can't open MP3 Dir");
  }


  //構造体リストの動的確保
  for(int i=0; i<INDEX_SIZE; i=i+1){
    index_list[i] = malloc(sizeof(index_type));
  }

  //構造体の中身の動的確保
  for(int i=0; i<INDEX_SIZE; i=i+1){
    index_list[i].music_name = malloc(sizeof(char)*MUSIC_NAME_SIZE);
    index_list[i].art_name = malloc(sizeof(char)*ART_NAME_SIZE);
    index_list[i].albam_name = malloc(sizeof(char)*ALBAM_NAME_SIZE);
  }

  Dir dir; //appUtil.hmmで宣言されている
  //Dir構造体のnameメンバーは，大きさ12の文字配列で初期化されている必要があります(cmm.pdf 4.1.17 readDir)
  int i = 0;
  while (i<5 && (dir=readDir(fd, "MP3"))!=null) {   // 最大5つファイル名を読む -> 後で変更
    printF("dir.file=%s\n", dir.name);
    strCpy(index_list[i].music_name, dir.name); //ファイル名をfilesにコピー
    i = i + 1;
  }
  numFile = i;

  TagsInit();

  close(fd);
}


void subCpy(char[] target, char[] ori, int index, int n){
    for(int i=0;i<n;i=i+1){
        target[i] = ori[i+index];
    }
    target[n] = '\0';
}


//appUtil.cmmにあるstrCatを使うとうまく動かなかったので自作
public char[] subCat(char[] cat_s, char[] src){
  char[] s = malloc(sizeof(char)*32);
  int c_num = strLen(cat_s);
  int s_num = strLen(src);
  strCpy(s, cat_s);
  int index;
  for(index=0; index<s_num;index=index+1){
    s[c_num+index] = src[index];
  }
  s[c_num+index] = '\0';
  free(s);
  return s;
}


//引数aとbのgcdを計算する
int gcd(int a, int b){
    int c = 0;
    if((a<=0)||(b<=0)){
        //引数のエラー
        return -1;
    }
    if(a<b){
        //aのほうが小さい場合、aとbを入れ替える
        int tmp = a;
        a = b;
        b = tmp;
    }
    while((c=a%b)!=0){
        a = b;
        b = c;
    }
    return b;
}


//decimal -> binary
void dtob(char[] binary, int decimal){
    int i;
    for(i=7;decimal>0; i=i-1){
        binary[i] = chr((decimal%2)+ord('0'));
        decimal = decimal/2;
    }
    if(i!=0){
        for(int t=0;t<=i;t=t+1){
            binary[t] = '0';
        }
    }
    binary[8] = '\0';
}


//四捨五入計算用の関数
int subRound(int a, int d){
    if(((a%d)/(d/10))>=5){
        return a/d + 1;
    } 
    return a/d;
}


//_AtoI()が謎だったので似たような関数を作成 ascii -> int
public int func_atoi(char[] str, int len){
  int tmp, sum = 0;
  for(int i=0; len>0; i=i+1){
    tmp = ord(str[i]) - ord('0');
    for(int p=1; p<len; p=p+1){
      tmp = tmp*10;
    }
    sum = sum + tmp;
    len = len - 1;
  }
  return sum;
}


//_ItoAもよくわからなかったため似た関数を作成 int -> ascii
public char[] func_itoa(int a){
  char[] str = malloc(sizeof(char)*6);
  if(48 <= (a+ord('0')) && (a+ord('0')) <= 57){ //0~9ならば
      str[0] = chr(a+ord('0'));
      str[1] = '\0';
      return str;
  } else{ //10以上
      int cnt = 0, q = a, i;
      while(q > 10){ //桁数
          q = q / 10;
          cnt = cnt + 1;
      }
      str[0] = chr(q+ord('0'));
      q = a;
      for(i=1; i<cnt; i=i+1){
          for(int t=0; t<(cnt-i); t=t+1){
              q = q / 10;
          }
          q = q%10;
          str[i] = chr(q+ord('0'));
          q = a;
      }
      int ama = a%10;
      str[i] = chr(ama+ord('0'));
      str[i+1] = '\0';
      return str;
  }
  free(str);
  return "0";
}


void TagsInit(){
  int fp;
  int step = 0;

  if((fp=open("index.csv", READ_MODE))>=0){ //インデックスファイルが存在したら
    char[] str_line = malloc(sizeof(char)*32);
    //最初の行は空読み
    read(fp, buf, 31);

    //各行を処理する
    for(int i=0; i<numFile; i=i+1){
      int t;
      read(fp, buf, 1);
      for(t=0; ord(buf[0])!=10; t=t+1){
        if(buf[0] == ','){
          str_line[t] = '\0';
          if(step == 0){ //music_name
            strCpy(index_list[i].music_name, str_line);
          } else if(step == 1){ //id
            index_list[i].id = func_atoi(str_line, t);
          } else if(step == 2){ //play_cnt
            index_list[i].play_cnt = func_atoi(str_line, t);
          } else if(step == 3){ //art_name
            strCpy(index_list[i].art_name, str_line);
          } 
          t = -1;
          step = step + 1;
        } else{
          str_line[t] = buf[0];
        }
        read(fp, buf, 1);
      }
      str_line[t] = '\0';
      if(step == 4){ //song_len
        index_list[i].song_len = func_atoi(str_line, t);
      }
      step = 0;
      printF("%s / %d / %d / %s / %d\n", index_list[i].music_name, index_list[i].id, index_list[i].play_cnt, index_list[i].art_name, index_list[i].song_len);
    }
    free(str_line);
  } else{ //インデックスファイルが存在しない(初期起動)

    //tag = malloc(sizeof(mp3_tag));
    for(int p=0;p<numFile;p=p+1){
      int loop_cnt = 0;
      boolean tag_flag = false;
      char[] d = "./MP3/"; //パス指定
      char[] file_mp3 = malloc(sizeof(char)*MUSIC_NAME_SIZE);
      file_mp3 = subCat(d, index_list[p].music_name); //strCatと同じ動き
      //タグ格納(初期値)
      index_list[p].id = p;
      strCpy(index_list[p].art_name, "NO_NAME"); //アーティスト名が決められていたら更新
      strCpy(index_list[p].albam_name, "NONE"); //アルバム名が決められていたら更新
      index_list[p].play_cnt = 0;
      //
      if ((fp=open(file_mp3, READ_MODE))<0) {
        panic("panic2:can't open MP3 files");
      }
      read(fp, buf, 3); //最初の3byte(ID3タグがあるかどうか)
      for(int i=0;i<3;i=i+1){
        if(buf[0]=='I' && buf[1]=='D' && buf[2]=='3'){
          tag_flag = true;
        }
      }
      while(!debugflag){
        read(fp, buf, 1);
        //5文字か6文字以上だとタグとくっついてしまう -> 何とかタグ部分と分ける必要がある
        if(isPrint(buf[0]) && ord(buf[0]) != 0 && tag_flag){
          char[] tag_str = malloc(sizeof(char)*20);
          char[] tag_tmp = malloc(sizeof(char)*5);
          int len = 0;
          while(true){
            if(isPrint(buf[0]) || ord(buf[0]) == 0){ //Asciiで表現できるか
              if(isDigit(buf[0]) || isUpper(buf[0]) || isLower(buf[0])){ //英数字かどうか
                tag_str[len] = buf[0];
                len = len + 1;
              } else{
                break;
              }
            }
            read(fp, buf, 1);
          }
          tag_str[len] = '\0';
          //文字列の後ろにタグがくっついている可能性がある
          for(int i=0; i<4; i=i+1){
            tag_tmp[i] = tag_str[len-(4-i)];
          }
          if(strCmp(tag_tmp, "TPE1") == 0 || (strCmp(tag_tmp, "TALB") == 0 || strCmp(tag_tmp, "TPE2") == 0)){
            tag_str[len-4] = '\0';
          }
          tag_tmp[4] = '\0';
          //
          if(step == 1){ //アーティスト名抽出
            strCpy(index_list[p].art_name, tag_str);
            step = 0;
          } else if(step == 2){ //アルバム名抽出
            strCpy(index_list[p].albam_name, tag_str);
            step = 0;
          }
          if(strCmp(tag_str, "TPE1") == 0 || strCmp(tag_tmp, "TPE1") == 0){
            tag_tmp[0] = '\0';
            step = 1;
          } else if(strCmp(tag_str, "TALB") == 0 || strCmp(tag_tmp, "TALB") == 0){
            tag_tmp[0] = '\0';
            step = 2;
          }
          tag_str[0] = '\0';
          free(tag_str);
          free(tag_tmp);
        }
        if(ord(buf[0])==255 && loop_cnt > 1000){
          char version_id = '0'; //1:version1.0, 2:version2.0, 3:version2.5
          char layer_id = '0'; //3:layer3, 2:layer2, 1:layer1
          int bit_rate = 0;
          int sampling_h = 0;
          char padding = '0';
          int frame_cnt = 0;
          int frame_size = 0;
          int quo_1 = 1, quo_2 = 1;

          char[] bin_bit = malloc(sizeof(char)*10);
          char[] b = malloc(sizeof(char)*5);

          read(fp, buf, 1);
          printF("next=%d\n", ord(buf[0]));
          //decimal -> binary
          dtob(bin_bit, ord(buf[0]));
          //
          //B:version
          subCpy(b, bin_bit, 3, 2);
          if(strCmp(b, "00") == 0){
              version_id = '3';
          } else if(strCmp(b, "10") == 0){
              version_id = '2';
          } else if(strCmp(b, "11") == 0){
              version_id = '1';
          } else{
              version_id = '0';
          }
          //
          //C:layer
          subCpy(b, bin_bit, 5, 2);
          if(strCmp(b, "00") == 0){
              layer_id = '0'; //not used
          } else if(strCmp(b, "01") == 0){
              layer_id = '3';
          } else if(strCmp(b, "10") == 0){
              layer_id = '2';
          } else if(strCmp(b, "11") == 0){
              layer_id = '1';
          }
          //
          //next header(third)
          read(fp, buf, 1);
          //decimal -> binary
          dtob(bin_bit, ord(buf[0]));
          //
          //E:bit rate
          subCpy(b, bin_bit, 0, 4);
          int bin_num = 0;
          //binary -> decimal
          for(int i=0;i<=3;i=i+1){
              if(b[3-i]=='1'){
                  bin_num = bin_num + bin_p[i];
              }
          }
          if(version_id == '1'){
              bit_rate = bit_rate_table_1[bin_num][ord(layer_id)-ord('0')-1];
          } else if(version_id == '2' || version_id == '3'){
              bit_rate = bit_rate_table_2[bin_num][ord(layer_id)-ord('0')-1];
          }
          //
          //F:sampling rate
          subCpy(b, bin_bit, 4, 2);
          int sampling_num = 0;
          for(int i=0;i<=1;i=i+1){
              if(b[1-i]=='1'){
                  sampling_num = sampling_num + bin_p[i];
              }
          }
          if(version_id != '0'){
              sampling_h = sample_rate[sampling_num][ord(version_id)-ord('0')-1];
          }
          //
          //G:padding
          if(bin_bit[6] == '0'){
              padding = '0';
          } else{
              padding = '1';
          }
          if(gcd(bit_rate*10, sampling_h) > 0){
            quo_1 = gcd(bit_rate*10, sampling_h);//最大公約数
          }
          if(layer_id == '1'){
            if(gcd(12, sampling_h/quo_1) > 0){
              quo_2 = gcd(12, sampling_h/quo_1);
            }
            frame_size = (((12 / quo_2)*(bit_rate*10 / quo_1) / ((sampling_h / quo_1) / quo_2)) + (ord(padding) - ord('0')))*4;
          } else if(layer_id == '2' || layer_id == '3'){
              if(version_id == '1'){
                if(gcd(144, sampling_h/quo_1) > 0){
                  quo_2 = gcd(144, sampling_h/quo_1);
                }
                frame_size = (((144 / quo_2)*(bit_rate*10 / quo_1)) / ((sampling_h / quo_1) / quo_2)) + (ord(padding) - ord('0'));
              }
          } else if(layer_id == '3' && version_id == '3'){
            if(gcd(72, sampling_h/quo_1) > 0){
              quo_2 = gcd(72, sampling_h/quo_1);
            }
            frame_size = (((72 / quo_2)*(bit_rate*10 / quo_1)) / ((sampling_h / quo_1) / quo_2)) + (ord(padding) - ord('0'));
          }
          //
          //next frame
          for(int i=0;i<=frame_size-3;i=i+1){
              read(fp, buf, 1);
          }
          while(true){
            frame_cnt = frame_cnt + 1;
            read(fp, buf, 1);
            if(ord(buf[0]) < 224){ //end of file E0を下回ったら(構成的にあり得ない)
              printF("bit=%s %c\n", bin_bit, bin_bit[6]);
              printF("%d\n", ord(buf[0]));
              break;
            }
            int one_loop = (frame_size-1)%32;
            for(int i=0;i<((frame_size-1)/32);i=i+1){
              read(fp, buf, 32);
              if(i==0){
                dtob(bin_bit, ord(buf[0]));
                if(bin_bit[6]=='1'){
                  one_loop = one_loop + 1;
                }
              }
            }
            for(int i=0;i<one_loop;i=i+1){
              read(fp, buf, 1);
            }
          }
          int sum = frame_cnt * (1152 / sampling_h);
          sum = sum + subRound(frame_cnt, 10) * (func_cal(1152, sampling_h) / sampling_h);
          sum = sum + subRound(frame_cnt, 100) * (func_cal(func_cal(1152, sampling_h), sampling_h) / sampling_h);
          sum = sum + subRound(frame_cnt, 1000) * (func_cal(func_cal(func_cal(1152, sampling_h), sampling_h), sampling_h) / sampling_h);
          index_list[p].song_len = sum / 100;
          //
          free(bin_bit);
          free(b);
          printF("%d / %d / %d / %d / %d\n", bit_rate, sampling_h, frame_size, frame_cnt, sum/100);
          break;
        }
        loop_cnt = loop_cnt + 1;
      }
      printF("%s / %d / %s / %s / %d\n", index_list[p].music_name, index_list[p].id, index_list[p].art_name, index_list[p].albam_name, index_list[p].play_cnt);
      close(fp);
    }
  }
}
