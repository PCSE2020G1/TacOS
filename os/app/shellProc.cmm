/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2020 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * shellProc.cmm : MP3 プレーヤのメインプロセス
 *
 * 2020.09.07 : 新規作成
 * 2020.12.02 長谷川 : 音量調整処理の追加 
 * 2020.12.03 長谷川 : ListCreateInit()の呼び出しを追加
 *
 * $Id$
 *
 */
#include <kernel.hmm>
#include <util.hmm>
#include <mm.hmm>
#include "lcd.hmm"
#include "mp3Proc.hmm"
#include "spi.hmm"
#include "mp3Files.hmm"
#include "shellProc.hmm"
#include "font.hmm"
#include "CreateLists.hmm"
#include "appUtil.hmm"


//-----------------------------------------------------------------------------
// スイッチの読み取り
//-----------------------------------------------------------------------------
// 押しボタンスイッチのビット
#define SW1 0x20
#define SW2 0x10
#define SW3 0x08
#define SW4 0x04
#define SW5 0x02
#define SW6 0x01
#define SWS 0x3f                                    // スイッチのビット全部

int sw0 = 0x00;                                     // 前回の状態(デバウンス前)
int sw1 = 0x00;                                     // 前回の状態(デバウンス後)

// /playmode/artist/を選択した際、アーティストを抽出して、そのアーティスト名が何曲あるかを同時に格納する,構造体配列の型
struct artist_array_type{
    char[] art_name;
    int quantity;
};

public int readSw() {
  int sw = ~in(0x18) & SWS;                         // スイッチを読み正論理に変換
  int swd = sw & sw0;                               // デバウンス
  int sw2 = (sw1 ^ swd) & swd;                      // 今回，新たに押されたSW
  sw0 = sw;
  sw1 = swd;
  return sw2;
}

public int swToNum(int sw) {
  int num = -1;
  if ((sw & SW6)!=0) {                              // 6 番のスイッチが押された
    num = 6;
  } else if ((sw & SW5)!=0) {                       // 5 番のスイッチが押された
    num = 5;
  } else if ((sw & SW4)!=0) {                       // 4 番のスイッチが押された
    num = 4;
  } else if ((sw & SW3)!=0) {                       // 3 番のスイッチが押された
    num = 3;
  } else if ((sw & SW2)!=0) {                       // 2 番のスイッチが押された
    num = 2;
  } else if ((sw & SW1)!=0) {                       // 1 番のスイッチが押された
    num = 1;
  }
  return num;
}


//引数の文字列が印刷可能な文字であればtrue, そうでなければfalseを返す
boolean isName(char[] str){
  boolean flag = true;
  for(int id=0; id<strLen(str); id=id+1){ //1文字ずつ走査
    if(!isPrint(str[id])){
      //もし印刷可能な文字でないなら、false
      flag = false;
      break;
    }
  }
  return flag;
}


//-----------------------------------------------------------------------------
// 画面表示
//-----------------------------------------------------------------------------


void homeDisplay(){
  cls();
  putLineH(0,0,8,false);
  putLineH(15,0,8,false);
  putLineW(1,0,9,false);
  putLineW(1,7,9,false);
  putLineW(11,0,4,false);
  putLineW(11,7,4,false);
  putLineH(10,0,8,true);
  locateXY(2,1);
  putStr("PLAYMODE");
  locateXY(2,2);
  putStr("ALARM");
}

void playmodeDisplay(){
  //曲名表示部分,シークバーのところ以外を消し去るようにしてる
  //曲名を表示するところ、どうしようか？
  //もし再生中の曲名とかのデータを格納する変数があるなら、それを受け取って表示もできそうね
  cls_block(0,0,1,8);
  cls_block(0,0,16,6);
  cls_block(10,5,6,3);

  putLineH(0,0,5,false);
  putLineH(0,6,2,false);
  putLineH(15,0,8,false);
  putLineW(1,0,9,false);
  putLineW(0,5,10,true);
  putLineH(10,0,8,true);
  putLineW(11,0,4,false);
  putLineW(11,7,4,false);
  locateXY(2,1);
  putStr("Artist");
  locateXY(2,2);
  putStr("Album");
  locateXY(2,3);
  putStr("Music");

}

char[] display_name = array(20);
void playmode_music_Display(int n){
  display_name = malloc(sizeof(char)*20);

  cls_block(0,0,1,8);
  cls_block(0,0,16,6);
  cls_block(10,5,6,3);

  putLineH(0,0,5,false);
  putLineH(0,6,2,false);
  putLineH(15,0,8,false);
  putLineW(1,0,9,false);
  putLineW(0,5,10,true);
  putLineH(10,0,8,true);
  putLineW(11,0,4,false);
  putLineW(11,7,4,false);

  for(int i=0; i<3; i=i+1){
    //3曲分を取り出して画面に曲名を出す
    strCpy(display_name,index_list[n+i].music_name);
    dbgPutStr(display_name);
    dbgPutStr("\n");
    if(display_name[0]!='\0' && isName(display_name)){ //nullでなく、表示可能な文字列であれば
      if(strLen(display_name)>=8){ //8文字以上なら
        //8文字目に'...'を表示する
        display_name[8] = '\0';
        locateXY(9,1+i);
        putCh(chr(0x8a)); //'...'の表示
      }
      locateXY(2,1+i);
      putStr(display_name);
    }
  }

  //矢印の表示
  locateXY(2,4);
  putCh(chr(0x8c));
  free(display_name);

}


artist_array_type[] artist_array = array(INDEX_SIZE);
int qua_cnt = 0; //artarr_currentが参照するアーティスト名の個数をカウントする変数
int artarr_current = 0; //artist_arrayの現在参照位置を格納する変数

// /playmode/artistを選択した際に表示
void playmode_artist_Display(){
  display_name = malloc(sizeof(char)*20);

  // それまでの情報を削除
  cls_block(0,0,1,8);
  cls_block(0,0,16,6);
  cls_block(10,5,6,3);

  //枠線の表示
  putLineH(0,0,5,false);
  putLineH(0,6,2,false);
  putLineH(15,0,8,false);
  putLineW(1,0,9,false);
  putLineW(0,5,10,true);
  putLineH(10,0,8,true);
  putLineW(11,0,4,false);
  putLineW(11,7,4,false);

  for(int i=0; i<3; i=i+1){
    if(qua_cnt==artist_array[artarr_current].quantity){
      //個数が一致したら、次のアーティスト名を参照し始める
    }
    else if(qua_cnt==0){
      //0個目を表示する際は、その前にアーティスト名を表示する
      locateXY(1,1);
      putStr(artist_array[artarr_current].art_name);
    }
  }

  free(display_name);
}



void putCursor(int y){
  locateXY(1,y);
    putCh('>');
}

//-----------------------------------------------------------------------------
// MP3 プレーヤのメインプロセス
//-----------------------------------------------------------------------------
// ここからプロセスの実行が始まる
char[] tmp = array(20);

char[] play_path = array(30);
public void shellMain() {
  tmp = malloc(sizeof(char)*20);
  play_path = malloc(sizeof(char)*30);

  spiResetLcd();                                    // sleepを使用するので
  spiResetMp3();                                    //   プロセスが実行する
  mp3FilesInit();                                   // ファイル一覧を作る
  ListCreateInit();                                 //　インデックスファイルやリストの作成/管理
  
  //画面の状態を記録する変数
  //0:  初期画面
  //1:  /playmode/
  //2:  /playmode/artist/
  //3:  /playmode/album/
  //4:  /playmode/music/
  //5:  /alarm/
  int state = 0;
  
  //optionの状態を記録する変数
  //0:  optionなし
  //1:  /playmode/artist/option0
  //2:  /playmode/artist/option1
  //3:  /playmode/album/option0
  //4:  /playmode/album/option1
  //5:  /playmode/music/option0
  //6:  /playmode/music/option1
  //int option_state = 0;

  //カーソルの位置を保持する変数
  //locateXY()で呼び出す座標と同じ。つまり、この値が1のとき初期値
  int cursor_pos = 1;

  //index_listの現在参照位置を格納する変数
  //playmode_music_Display()の引数に渡す
  int index_current = 0;

  homeDisplay();
  putCursor(cursor_pos);
  int sw;
  int num; //スイッチの現在の状態の番号を格納
  int last_num = 0; //一つ前に読み取ったスイッチの状態の番号を格納
  for(;;){
    sw = readSw();
    num = swToNum(sw);
    if(state==0){ //初期画面のとき
      if(cursor_pos==1 && num==5){ //下ボタンが押されたら
        //カーソルを下に動かす
        cursor_pos = cursor_pos + 1;
        locateXY(1,cursor_pos-1);
        putCh(' ');
        putCursor(cursor_pos);
      }
      else if(cursor_pos==1 && num==3){ //横ボタンが押されたら(playmodeが選択されたら)
        // /playmodeに移行
        cursor_pos = 1;
        state = 1;
        playmodeDisplay();
        putCursor(cursor_pos);
      }
      else if(cursor_pos==2 && num==1){ //上ボタンが押されたら
        //カーソルを上に動かす
        cursor_pos = cursor_pos - 1;
        locateXY(1,cursor_pos+1);
        putCh(' ');
        putCursor(cursor_pos);
      }
      else if(cursor_pos==2 && num==3){ //横ボタンが押されたら(alarmが選択されたら)
        //アラームモードに移行
        state = 5;
        // alarm();   //ここでアラーム関数を呼ぶ(未実装)
      }
    }

    else if(state==1){ // /playmode/のとき
      putCursor(cursor_pos);
      if(cursor_pos==1 && num==5){ //下ボタンが押されたら
        //カーソル位置の更新
        cursor_pos = cursor_pos + 1;
        locateXY(1, cursor_pos-1);
        putCh(' ');
        putCursor(cursor_pos);
      }
      else if(cursor_pos==1 && num==3){ //右ボタンが押されたら(/playmode/artistが選択されたら)
        //構造体配列領域の確保
        for(int m=0; m<INDEX_SIZE; m=m+1){
          artist_array[m] = malloc(sizeof(artist_array_type)*INDEX_SIZE);
        }
        for(int m=0; m<INDEX_SIZE; m=m+1){
          artist_array[m].art_name = malloc(sizeof(char)*20);
        }
        FilesSort(3); //アーティスト名の降順でソートする
        dbgPutStr("end sort");
        dbgPutStr("\n");

        //アーティスト名をアーティスト配列に抽出
        //if((index_list[0].art_name!=null) && (isName(index_list[0].art_name))){
        if(index_list[0].art_name!=null){
          printF(index_list[0].art_name);
          printF("\n");
          strCpy(artist_array[0].art_name, index_list[0].art_name); //////??????????????
        }
        else{
          dbgPutStr("no artist name. please set tag.");
          dbgPutStr("\n");
        }
        printF(artist_array[0].art_name);
        printF("\n");
        artist_array[0].quantity = 1;
        int art_arr_id = 1;
        for(int m=1; m<INDEX_SIZE; m=m+1){
          if(strCmp(index_list[m].art_name, artist_array[art_arr_id].art_name) == 0){
            //もし前にartist_arrayに入ってたやつと一致していたら、quantityを一つカウントアップする
            artist_array[art_arr_id].quantity = artist_array[art_arr_id].quantity + 1;
          }
          else{
            //artist_arrayに入っていないアーティスト名が検出されたら、それを新しく登録する
            art_arr_id = art_arr_id + 1;
            strCpy(artist_array[art_arr_id].art_name, index_list[m].art_name);
            artist_array[art_arr_id].quantity = 1;
          }
        }

        qua_cnt = 0;
        // /playmode/artist/に遷移
        state = 2;
        playmode_artist_Display();
        cursor_pos = 1;
        putCursor(cursor_pos);
      }
      else if(cursor_pos==2 && num==5){ //下ボタンが押されたら
        //カーソル位置の更新
        cursor_pos = cursor_pos + 1;
        locateXY(1, cursor_pos-1);
        putCh(' ');
        putCursor(cursor_pos);
      }
      else if(cursor_pos==2 && num==1){ //上ボタンが押されたら
        //カーソル位置の更新
        cursor_pos = cursor_pos - 1;
        locateXY(1, cursor_pos+1);
        putCh(' ');
        putCursor(cursor_pos); 
      }
      else if(cursor_pos==3 && num==1){ //上ボタンが押されたら
        //カーソル位置の更新
        cursor_pos = cursor_pos - 1;
        locateXY(1, cursor_pos+1);
        putCh(' ');
        putCursor(cursor_pos);
      }
      else if(cursor_pos==3 && num==3){ //右ボタンが押されたら(musicモードが選択されたら)
        //musicモードに遷移
        state = 4;
        cursor_pos = 1;
        FilesSort(1); //index_listを降順にする
        strCpy(tmp,index_list[0].music_name);
        if(tmp!=null) playmode_music_Display(index_current);
        else{
          dbgPutStr("no music here.");
          dbgPutStr("\n");
        }

        putCursor(cursor_pos);
      }
      else if(num==2){ //左ボタンが押されたら(戻るボタン)
        //初期画面に戻す
        locateXY(1, cursor_pos);
        putCh(' ');
        state = 0;
        cursor_pos = 1;
        homeDisplay();
        putCursor(cursor_pos);
      }
    }

  else if(state==2){ // /playmode/artist/
    if(num==2){
      //戻るボタンが押されたら
      for(int m=0; m<INDEX_SIZE; m=m+1){
        free(artist_array[m].art_name);
      }
      for(int m=0; m<INDEX_SIZE; m=m+1){
        free(artist_array[m]);
      }
      state = 1;
      playmodeDisplay();
    }
  }

    else if(state==4){ // /playmode/music/
      putCursor(cursor_pos);
      if(cursor_pos==1 && num==1){ //上ボタンが押されたら
        //存在していれば、カーソルの更新と前の三曲分の表示
        if(index_current!= 0){
          locateXY(1, cursor_pos);
          putCh(' ');
          cursor_pos = 4;
          putCursor(cursor_pos);
          if(index_list[index_current-3].music_name!=null && isName(index_list[index_current-3].music_name)){
            index_current = index_current - 3;
            playmode_music_Display(index_current);
          }
        }
      }
      else if(cursor_pos==1 && num==5){ //下ボタンが押されたら
        //カーソル位置の更新
        cursor_pos = cursor_pos + 1;
        locateXY(1, cursor_pos-1);
        putCh(' ');
        putCursor(cursor_pos);
      }

      else if(cursor_pos==1 && num==3){ //まだ長押しは実装してない。今回は試験的に右ボタンで曲の再生、停止をしてみる
        //再生、停止
        if(!playFlag){
          //停止中の場合,再生
          printF("play music\n");
          strCpy(play_path, "");
          play_path = subCat("./MP3/", index_list[index_current].music_name); //パスの生成
          //subCat(path, ".mp3"); //パスの生成
          printF(play_path);
          printF("\n");
          play(play_path);
        } else{
          //再生中の場合、停止
          printF("music stop\n");
          stop();
        }
      }

      else if(cursor_pos==2 && num==1){ //上ボタンが押されたら
        //カーソル位置の更新
        cursor_pos = cursor_pos - 1;
        locateXY(1, cursor_pos+1);
        putCh(' ');
        putCursor(cursor_pos);
      }
      else if(cursor_pos==2 && num==5){ //下ボタンが押されたら
        //カーソル位置の更新
        cursor_pos = cursor_pos + 1;
        locateXY(1, cursor_pos-1);
        putCh(' ');
        putCursor(cursor_pos);
      }

      else if(cursor_pos==2 && num==3){ //まだ長押しは実装してない。今回は試験的に右ボタンで曲の再生、停止をしてみる
        //再生、停止
        if(!playFlag){
          //停止中の場合,再生
          printF("play music\n");
          strCpy(play_path, "");
          play_path = subCat("./MP3/", index_list[index_current+1].music_name); //パスの生成
          //subCat(path, ".mp3"); //パスの生成
          printF(play_path);
          printF("\n");
          play(play_path);
        } else{
          //再生中の場合、停止
          printF("music stop\n");
          stop();
        }
      }

      else if(cursor_pos==3 && num==1){ //上ボタンが押されたら
        //カーソル位置の更新
        cursor_pos = cursor_pos - 1;
        locateXY(1, cursor_pos+1);
        putCh(' ');
        putCursor(cursor_pos);
      }
      else if(cursor_pos==3 && num==5){ //下ボタンが押されたら
        //カーソル位置の更新
        cursor_pos = cursor_pos + 1;
        locateXY(1, cursor_pos-1);
        putCh(' ');
        putCursor(cursor_pos);
      }

      else if(cursor_pos==3 && num==3){ //まだ長押しは実装してない。今回は試験的に右ボタンで曲の再生、停止をしてみる
        //再生、停止
        if(!playFlag){
          //停止中の場合,再生
          printF("play music\n");
          strCpy(play_path, "");
          play_path = subCat("./MP3/", index_list[index_current+2].music_name); //パスの生成
          //subCat(path, ".mp3"); //パスの生成
          printF(play_path);
          printF("\n");
          play(play_path);
        } else{
          //再生中の場合、停止
          printF("music stop\n");
          stop();
        }
      }

      else if(cursor_pos==4 && num==1){ //上ボタンが押されたら
        //カーソル位置の更新
        cursor_pos = cursor_pos - 1;
        locateXY(1, cursor_pos+1);
        putCh(' ');
        putCursor(cursor_pos); 
      }
      else if(cursor_pos==4 && num==5){ //下ボタンが押されたら
        //カーソル位置の更新と、次の三曲分の表示
        locateXY(1, cursor_pos);
        putCh(' ');
        cursor_pos = 1;
        putCursor(cursor_pos);
        if((index_list[index_current+3].music_name!=null) && isName(index_list[index_current+3].music_name)){
          printF("next page\n");
          index_current = index_current + 3;
          playmode_music_Display(index_current);
        }
      }
      else if(num==2){ //戻るボタンが押されたら
        //playmodeの画面に戻る
        index_current = 0;
        locateXY(1, cursor_pos);
        putCh(' ');
        state = 1;
        cursor_pos = 1;
        playmodeDisplay();
        putCursor(cursor_pos);
      }
    }

    if(num==4){
      //音量上げる
      if(valume+0x0404 < 0x6060){    
          valume = valume + 0x0404; //音量を上げる
          spiWriteMp3Reg(0x0b, 0x6060-valume);
      }
    }
    else if(num==6){
      //音量下げる
      if(valume-0x0404 > 0x0000){    
          valume = valume - 0x0404; //音量を下げる
          spiWriteMp3Reg(0x0b, 0x6060-valume);
      }
    }

    sleep(10);
    last_num = num;
  }
  free(tmp);
  free(play_path);
}
