/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2020 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * shellProc.cmm : MP3 プレーヤのメインプロセス
 *
 * 2020.09.07 : 新規作成
 *
 * $Id$
 *
 */
#include <kernel.hmm>
#include <fs.hmm>
#include <util.hmm>
#include <tty.hmm>
#include "shellProc.hmm"
#include "lcd.hmm"
#include "mp3Proc.hmm"
#include "spi.hmm"

//-----------------------------------------------------------------------------
// スイッチの読み取り
//-----------------------------------------------------------------------------
// 押しボタンスイッチのビット
#define SW1 0x20
#define SW2 0x10
#define SW3 0x08
#define SW4 0x04
#define SW5 0x02
#define SW6 0x01
#define SWS 0x3f                                    // スイッチのビット全部

int sw0 = 0x00;                                     // 前回の状態(デバウンス前)
int sw1 = 0x00;                                     // 前回の状態(デバウンス後)

int readSw() {
    int sw = ~in(0x18) & SWS;                       // スイッチを読み正論理に変換
    int swd = sw & sw0;                             // デバウンス
    int sw2 = (sw1 ^ swd) & swd;                    // 今回，新たに押されたSW
    sw0 = sw;
    sw1 = swd;
    return sw2;
}

void demoScreen() {
  cls();                                            // LCDをクリアする
  locateXY(0,0); putStr("MP3 Player demo");

  locateXY(0,2); putStr("  1: 16kbps Mono");
  locateXY(0,3); putStr("  2: 32kbps");
  locateXY(0,4); putStr("  3: 64kbps");
  locateXY(0,5); putStr("  4: 128kbps");
  locateXY(0,6); putStr("  5: 192kbps");
  locateXY(0,7); putStr("  6: stop");
}

void asta(int y) {
  demoScreen();
  locateXY(0, y+1);
  putCh('*');
}

//-----------------------------------------------------------------------------
// MP3 プレーヤのメインプロセス
//-----------------------------------------------------------------------------
// ここからプロセスの実行が始まる
public void shellMain() {
  spiResetLcd();                                    // sleepを使用するので
  spiResetMp3();                                    //   プロセスが実行する

  char[] path1 = "/MP3/WEL16KM.MP3";                // 16kbps モノラル
  char[] path2 = "/MP3/WEL32K.MP3";                 // 32kbps
  char[] path3 = "/MP3/WEL64K.MP3";                 // 64kbps
  char[] path4 = "/MP3/WEL128K.MP3";                // 128kbps
  char[] path5 = "/MP3/WEL192K.MP3";                // 192kbps

  demoScreen();
  for (;;) {
    int sw = readSw();
    if ((sw & SW6)!=0) {                            // 6 番のスイッチが押された
      dbgPutStr("stop\n");
      demoScreen();
      stop();
    } else if ((sw & SW5)!=0) {                     // 5 番のスイッチが押された
      asta(5);
      play(path5);
    } else if ((sw & SW4)!=0) {                     // 4 番のスイッチが押された
      asta(4);
      play(path4);
    } else if ((sw & SW3)!=0) {                     // 3 番のスイッチが押された
      asta(3);
      play(path3);
    } else if ((sw & SW2)!=0) {                     // 2 番のスイッチが押された
      asta(2);
      play(path2);
    } else if ((sw & SW1)!=0) {                     // 1 番のスイッチが押された
      asta(1);
      play(path1);
    }
    sleep(10);                                      // 10ms に一度
  }
}
