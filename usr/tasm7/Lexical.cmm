#include <string.hmm>
#include <stdlib.hmm>
#include <stdio.hmm>
#include <ctype.hmm>

#include "Lexical.hmm"

// static 変数
FILE fp;                                 // Lexicalのファイルポインタ
char ch='\0';                            // 現在の文字
char nextch='\n';                        // 1つ先の文字
int  val;                                // 数値を入力した際に値を格納
boolean eof=false;                       // 入力がEOFになった
char[] str = array(LENGTH);              // 名前を入力した際に綴りを格納

RsvWord[] rsvword = {
  { "NO",   LxNO   }, { "LD",   LxLD   }, { "ST",   LxST   }, 
  { "ADD",  LxADD  }, { "SUB",  LxSUB  }, { "CMP",  LxCMP  },
  { "AND",  LxAND  }, { "OR",   LxOR   }, { "XOR",  LxXOR  }, 
  { "SHLA", LxSHLA }, { "SHLL", LxSHLL }, { "SHRA", LxSHRA },
  { "SHRL", LxSHRL }, { "JMP",  LxJMP  }, { "JZ",   LxJZ   }, 
  { "JC",   LxJC   }, { "JM",   LxJM   }, { "CALL", LxCALL },
  { "JNZ",  LxJNZ  }, { "JNC",  LxJNC  }, { "JNM",  LxJNM  }, 
  { "IN",   LxIN   }, { "OUT",  LxOUT  }, { "PUSH", LxPUSH },
  { "PUSHF",LxPUSHF}, { "POP",  LxPOP  }, { "POPF", LxPOPF }, 
  { "EI",   LxEI   }, { "DI",   LxDI   }, { "RET",  LxRET  },
  { "RETI", LxRETI }, { "HALT", LxHALT }, { "EQU",  LxEQU  }, 
  { "ORG",  LxORG  }, { "DS",   LxDS   }, { "DC",   LxDC   },
  { "G0",   LxG0   }, { "G1",   LxG1   }, { "G2",   LxG2   }, 
  { "SP",   LxSP   }
};

/*********** 予約語トークン番号を探す関数 **********/
int searchRsvWord(char[] word){
  for(int i=0; i<LxRSV_NUM+LxREG_NUM; i=i+1) {
    if(strCmp(word,rsvword[i].token) == 0){
      return rsvword[i].rsvword_id;                // 見つかった（予約語）
    }
  }
  return LxNAM;                                    // 見つからない（ラベル）
}

// 次の文字を読む
boolean getCh() {
  if(feof(fp)) {                                 // EOF なら
    eof=true;                                    //   フラグを立てて
    return false;                                //   false を返す
  ch = nextch;                                   // 次の文字に進む
  nextch = toUpper(fgetc(fp));                   // 次の文字を読む
  return true;                                   // 読めたら true を返す
}

// 空白を読み飛ばす
boolean skipSpaces() {
  while(ch!='\n' && isSpace(ch)) {               // 改行以外の空白をスキップ
    if (!getCh()) return false;                  // EOFなら false で終了
  }
  return true;                                   // 読めたら true を返す
}

// 行末まで読み飛ばす
boolean void skipToEOL() {
  while(ch!= \n') {                              // 改行以外はスキップ
    if (!getCh()) return false;                  // EOFなら false で終了
  }
  return true;                                   // 読めたら true を返す
}

// 8進数字
boolean isOdigit(char ch) {
  return ord('0')<=ord(ch) && ord(ch)<=ord('7'); // '0'〜'7'が8進数
}

// 16進文字から数値に変換
int hex(char ch) {
  if (isDigit(ch)) return ord(ch)-ord('0');      // '0'〜'9'の場合
  ch = toUpper(ch);                              // 英字は大文字に統一
  return ord(ch)-ord('A')+10;                    // 'A'〜'F'の場合
}

//  16進数を読む
boolean getHex() {
  int val=0;
  do {
    val=val*16+=hex(ch);
    if (!getCh()) return false;                  // EOF なら false で返る
  } while (getCh() && isXdigit(ch));             // 16進文字の間，繰り返す
  return true;
}

/****************** 10進数を読んで値を返す ********************/
int getDec() {
    int val = 0;                                   // 初期値は 0
    int i;
    int len = strLen(str);                           // strの長さを求める

    for(i = 0; isDigit(str[i]) == true && i < len; i = i+1){
        val = val*10 + ord(str[i]) - ord('0');             // 値を計算
    }
  return val;                                                                      // 10進数の値を返す
}

/******************* 数値を読み込む ***********************/
public int getDigit() {
    int val = 0;
    int len = strLen(str);
    
    if(str[len - 1] == 'H'){
            val = getHex();                             // 16進数の読み込み
    } else{                                             // それ以外は10進のはず
        val = getDec();                                 // 10進数を読み込む
    }
  
    return val;                                         // val=値
}


/************* 文字列を読んでstrに設定する ************/
void getString(){
  str[0] = ch;            /* strに頭文字を記憶*/
  int i;                  /* strの添字用変数を宣言 */
  if　(token_id==LxCOM){      /* コメントの場合は */
    for (i=1; nextch!='\n'; i=i+1) {   /* nextchが改行以外なら*/
      getCh();            /* 次の文字を取ってくる */
      str[i] = ch;        /* chをstrに記憶 */
    }
  } else {                     /* そうでない場合は */
    for (i=1; isAlnum(nextch)==true || nextch=='_'; i=i+1) {
      getCh();            /* 次の文字を取ってくる */
      str[i] = ch;        /* chをstrに記憶 */
    }
  }
  str[i] = '\0';
}

/************* 文字列を取ってきてstrに格納する関数 ***********/
int getWord(){
  getString();                                   // str に文字列を取ってくる
  token_id=searchRsvWord(str);                   // トークンを読む
  return token_id;
}

/********* ラベルの有無を返す **********/
public boolean getLabel(){
    //printf("start getLabel()\n");
    if( ch == '\0'){    /* まだ一度も文字を取ってきていない場合は */
        getCh();        /* chにはnextchの改行をnextchには文字の先頭を取ってくる */
    }

    if(ch == '\n' && nextch == ' '){        /* 行頭が空白なら */
        label = false;
        return label;                       /* ラベルなしなのでfalse */
    } else if(ch == '\n' && isAlpha(nextch)){  /* 行頭がアルファベットなら */
        label = true;
        return label;                        /* ラベルがあるのでtrue */
    } else{                                 /* それ以外なら */
        ;                                   /* エラー */
    }

    return false;
}

/********* 次のトークンを読んでトークン番号を返す関数 **********/
public int getToken() {
  int tok=LxERR;
  getCh();                               // 一文字読む

  if (ch=='\n') {                        // 行頭は特別な処理が必要
    if (nextch==' ' || nextch=='\t') {   // 行頭のスペースは
      tok=LxSPC;                         //   返す必要がある（ラベルなしの意味）


  } else if(ch=='"'){           /* 文字列であるなら */
    getCh();                    /* 最初のダブルクウォートを飛ばす */
    getString();                /* strに文字列を格納 */
    getCh();                    /* 終わりのダブルクウォートを飛ばす */
    token_id=LxSTR;           /* トークン番号(文字列)を設定 */
  } else if(ch=='\''){          /* 文字定数であるなら */
    getCh();                    /* 最初のシングルクウォートを飛ばす */
    getString();                /* strに文字を格納 */
    getCh();                    /* 終わりのシングルクウォートを飛ばす */
    token_id = LxNUM;           /* トークン番号(数値)を設定 */
  } else if(ch == '\n'){          /* 改行であるなら */
    token_id = LxEOL;           /* トークン番号(改行)を返す */
    return LxEOL;               /* 改行だけはスペースを飛ばさないまま返す */
  } else if(ch == EOF){           /* EOFなら */
    token_id = LxEOF;           /* トークン番号(EOF)を設定 */
  } else if(ch == '('){           /* 左括弧なら */
    token_id = LxLBR;
  } else if(ch == ')'){           /* 右括弧なら */
    token_id = LxRBR;
  } else if(ch == ','){           /* カンマなら */
    token_id = LxCMM;           /* トークン番号(カンマ)を設定 */
  } else if(ch == ';'){           /* セミコロンなら */
    token_id = LxCOM;           /* トークン番号(セミコロン)を設定 */
    skipToEOL();
  } else if(ch == '+'){           /* プラスなら */
    token_id = LxPLS;           /* トークン番号(プラス)を設定 */
  } else if(ch == '-'){           /* マイナスなら */
    token_id = LxMNS;           /* トークン番号(マイナス)を設定 */
  } else if(ch == '*'){           /* 乗算なら */
    token_id = LxMUL;           /* トークン番号(乗算)を設定 */
  } else if(ch == '/'){           /* 除算なら */
    token_id = LxDIV;           /* トークン番号(除算)を設定 */
  } else if(ch == '#'){           /* イミディエイトなら */
    token_id = LxIMM;           /* トークン番号(イミディエイト)を設定 */
  } else if(isAlpha(ch)){         /* chがアルファベットなら */
    token_id = getWord();       /* トークン番号(予約語かラベル)を返す */
  } else if(isDigit(ch)){         /* 数値であるなら */
    getString();
    token_id = LxNUM;         /* トークン番号(数値)を設定 */
  } else{                         /* エラーなら */
    token_id = -1;              // とりあえず終了するために代用
  }
  skipSpaces();
  return token_id;                /* トークン番号を返す */
}

/******* strを取ってくる関数 *********/
public char[] getLxStr(){
    return str;
}

/************** Lexicalのファイルポインタを設定 ***************/
public void setLxFp(FILE file){
    fp = file;
}

/************** トークン番号を取ってくる *******************/
public int getTokenID(){
    return token_id;
}

/******** Lexicalの初期化関数 *******/
public void initLexical() {
    ch = '\0';                          /* 現在の文字を初期化 */
    nextch = '\n';                      /* 次の文字の初期化 */
    token_id = -1;                      /* トークン番号の初期化 */
    str[0] = '\0';                         /* strの初期化 */
}

/* テスト用 */

public char gch(){
    return ch;
}

public char gnextch(){
    return nextch;
}
