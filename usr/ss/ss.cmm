/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2016 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

 /*
  * ss/ss.cmm : ファイル送信プログラム
  *
  * 2019.01.28 : 新規作成
  *
  * $Id$
  *
  */


#include <stdio.hmm>
#include <stdlib.hmm>
#include <string.hmm>

#define DEBUG
#define BLOCK_SIZE 24
#define BUFFER_SIZE 128
#define ACK "!Ack"
#ifdef DEBUG
#define DEBUG_OUT " [<debug output>]"
#define debug(...) { if (debugOut != null) fprintf(debugOut, __VA_ARGS__); }
FILE debugOut;
#else
#define debug(...)
#define DEBUG_OUT ""
#endif

int[] filesize = array(2);
char[] buffer = array(BUFFER_SIZE);

void output(int length, char[] buffer, boolean wait_for_ack);

public int main(int argc, char[][] argv){
  if (argc < 2){ /* ファイル名がない */
    fprintf(stderr, "Usage: %s <filename> [<as filename>]%s\n", argv[0], DEBUG_OUT);
    return 1;
  }
#ifdef DEBUG
  if (argc >= 4) debugOut = fopen(argv[3], "w");
  else debugOut = null;
#endif

  /* ファイル長を取得 */
  if (fsize(argv[1], filesize)){
    perror(argv[1]);
    return 1;
  }

  FILE fp = fopen(argv[1], "r");
  if (fp == null){ /* ファイルがない */
    perror("fopen");
    return 1;
  }

  char[] filename = argv[1];
  if (argc >= 3) filename = argv[2];

  printf("%s\n", filename); /* ファイル名を出力 */
  printf("%d\n", filesize[1]); /* ファイル長の下位32bit */
  printf("%d\n", BLOCK_SIZE); /* ブロックサイズ */

  //int checksum = 0;

  int wholelen = 0;
  int length = 0;
  while (!feof(fp)){
    char c = fgetc(fp);
    buffer[length] = c;
    length = length + 1;

    if (length == BLOCK_SIZE){
      output(length, buffer, true);
      wholelen = wholelen + length;
      debug("output %3d\n", wholelen);
      length = 0;
    }
  }
  if (length > 0) {
    output(length, buffer, false);
    wholelen = wholelen + length;
    debug("output %3d (fin)\n", wholelen);
  }

#ifdef DEBUG
  if (debugOut != null) fclose(debugOut);
#endif

  return 0;
}

int b64e(char[] buffer, int length, int offset);

void output(int length, char[] buffer, boolean wait_for_ack){
  for (int i = 0; i < length; i = i + 3){
    b64e(buffer, length, i);
  }
  printf("\n");
  fflush(stdout);

  /* Ackを待つ */
  while (wait_for_ack){
    fgets(buffer, BUFFER_SIZE, stdin);
    if (strCmp(buffer, ACK) == 0) {
      break;
    }
  }
}

// Base64で出力するためのメソッド
char[] b64tbl = "=ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

char b2a(int b) {
  return b64tbl[b+1];
}

int b64e(char[] buffer, int length, int index) {
  int w, x, y, z;
  int offset = 0;
  w = x = y = z = -1;
  if (index + offset < length){
    w = ord(buffer[index + offset]) >> 2 & 0x3f;
    x = ord(buffer[index + offset]) << 4 & 0x3f;
    offset = 1;
    if (index + offset < length){
      x = x | ord(buffer[index + offset]) >> 4 & 0x3f;
      y = ord(buffer[index + offset]) << 2 & 0x3f;
      offset = 2;
      if (index + offset < length){
        y = y | ord(buffer[index + offset]) >> 6 & 0x3f;
        z = ord(buffer[index + offset]) & 0x3f;
        offset = 3;
      }
    }
  }
  putchar(b2a(w));
  putchar(b2a(x));
  putchar(b2a(y));
  putchar(b2a(z));
  return offset;
}
