/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2019 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * sr/sr.cmm : ファイルをシリアルから受信する
 *
 * 2019.07.11 : 藤村くんのプログラムを取り込む
 *
 * $Id$
 *
 */

//#define DEBUG

#if defined(DEBUG)
# define debug(...) fprintf(stderr, __VA_ARGS__)
#else
# define debug(...) /* __VA_ARGS__ */
#endif

#include <stdio.hmm>
#include <stdlib.hmm>
#include <string.hmm>
#include <ctype.hmm>
#include <syslib.hmm>
#define ACK '!'
#define N 80
char[] buf = array(N);

void ack() {
  buf[0] = ACK;
  ttyWrite(buf, 1);
}

public int main(int argc, char[][] argv) {
  if (argc>1) {
    fprintf(stderr, "Usage: %s\n", argv[0]);
    return 1;
  }

  fgets(buf, N, stdin);
  int pos=strRchr(buf, '\n');
  if (pos==-1) {
    fprintf(stderr, "format error\n");
    exit(1);
  }

  buf[pos] = '\0';

  remove(buf);                              // 書き込む前にファイルを削除する

  debug("fopen:%s\n",buf);
  FILE fp = fopen(buf, "w");
  if (fp==null) {
    perror(buf);
    exit(1);
  }

  fgets(buf, N, stdin);
  int fsize = atoi(buf);
  debug("filelength:%s:%d\n",buf,fsize);

  fgets(buf, N, stdin);
  int bsize = atoi(buf);
  debug("blocksize:%s:%d\n",buf,bsize);
  if (bsize > N) {
    fprintf(stderr, "Error: block size is up to %d\n", N);
    exit(1);
  }

  int modeOrig = ttyCtl(TTYCTL_GETMODE, 0);
  int modeChanged = modeOrig & ~TTYCTL_MODE_COOKED & ~TTYCTL_MODE_ECHO;
  ttyCtl(TTYCTL_SETMODE, modeChanged);

  ack();                                    // RAW　モードになったことを相手に教える

  int cbsize = 0;
  int cfsize = 0;
  while (cfsize<fsize) {
    int n = fsize - cfsize;
    if (n > bsize) n = bsize;
    int len = ttyRead(buf, n);

    for (int k = 0; k < len; k = k + 1) {
      char c = buf[k];
      fputc(c, fp);
      cbsize = cbsize + 1;
      cfsize = cfsize + 1;

      // ブロックサイズに達したら ACK を返す
      if (cbsize >= bsize) {
        ack();
        cbsize = 0;
      }
    }
  }
  fclose(fp);

  ttyCtl(TTYCTL_SETMODE, modeOrig);

  return 0;
}
